generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Affiliation {
  DROITE
  GAUCHE
  EXTREME_DROITE
  EXTREME_GAUCHE
  CENTRE
  AUTRE
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String
  firstName     String
  password      String
  telephone     String
  address       String
  profession    String
  affiliation   Affiliation
  follows       String[] //ids of groups parties personalities and topics
  notifications Notifications[]
  isVerified    Boolean         @default(false)
  language      String
  role          Role
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Personality   Personality[]
  Argument      Argument[]
}

model Notifications {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Groupe {
  id String @id @default(uuid())
}

model Party {
  id          String        @id @default(uuid())
  name        String
  logo        String
  description String
  reason      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  for         String[]
  against     String[]
  Personality Personality[]
}

model Personality {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  party   Party?   @relation(fields: [partyId], references: [id])
  partyId String?
  for     String[]
  against String[]
}

model Topic {
  id            String     @id @default(uuid())
  title         String
  parentTopicId String?
  childrenId    String[]
  description   String
  medias        String[]
  arguments     Argument[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Argument {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [id], references: [id])
  Topic     Topic?   @relation(fields: [topicId], references: [id])
  topicId   String?
  content   String
  responses String[]
}
