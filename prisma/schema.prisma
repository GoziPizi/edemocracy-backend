generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Affiliation {
  RIGHT
  LEFT
  FAR_RIGHT
  FAR_LEFT
  CENTER
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String
  firstName     String
  password      String
  telephone     String
  address       String
  profession    String
  description   String          @default("")
  politicSide   Affiliation
  follows       String[] //ids of groups parties personalities and topics
  notifications Notifications[]
  isVerified    Boolean         @default(false)
  language      String
  role          Role
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Personality   Personality?
  Argument      Argument[]
  SurveyAnswer  SurveyAnswer[]
  Vote          Vote[]
}

model Notifications {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Groupe {
  id String @id @default(uuid())
}

model Party {
  id          String        @id @default(uuid())
  name        String
  logo        String
  description String        @default("")
  reason      String        @default("")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  for         String[]
  against     String[]
  Personality Personality[]
}

model Personality {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  party       Party?   @relation(fields: [partyId], references: [id])
  partyId     String?
  description String
  for         String[]
  against     String[]
}

model Topic {
  id            String   @id @default(uuid())
  title         String
  parentTopicId String?
  childrenId    String[]
  description   String
  medias        String[]
  debates       String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Debate {
  id          String     @id @default(uuid())
  title       String
  description String
  arguments   Argument[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  topicId     String?
}

model Argument {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  debateId  String
  content   String
  responses String[]
  votes     Vote[]
  nbGood    Int      @default(0)
  nbBad     Int      @default(0)
  Debate    Debate   @relation(fields: [debateId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id         String   @id @default(uuid())
  value      Boolean
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  argument   Argument @relation(fields: [argumentId], references: [id])
  argumentId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Survey {
  id          String   @id @default(uuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SurveyAnswerType {
  PASDUTOUT
  PEU
  NEUTRE
  DACCORD
  BEAUCOUP
}

model SurveyAnswer {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  answer    SurveyAnswerType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}
