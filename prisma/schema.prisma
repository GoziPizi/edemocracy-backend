generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Affiliation {
  RIGHT
  LEFT
  FAR_RIGHT
  FAR_LEFT
  CENTER
  NONE
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum MembershipStatus {
  NONE
  STANDARD
  PREMIUM
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  name      String
  firstName String
  password  String
  telephone String
  address   String

  //optional fields
  profession         String?
  profilePicture     String?
  formationName      String?
  formationObtention Int?
  birthSex           String?
  actualSex          String?
  sexualOrientation  String?
  religion           String?
  description        String   @default("")
  isVerified         Boolean  @default(false)
  language           String   @default("fr")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  politicSide        Affiliation
  role               Role
  contributionStatus MembershipStatus? @default(NONE)

  notifications                  Notifications[]
  Personality                    Personality?
  Argument                       Argument[]
  Vote                           Vote[]
  DebateVote                     DebateVote[]
  PartyMembership                PartyMembership[]
  MembershipInvites              MembershipInvite[]
  Opinion                        Opinion[]
  PartyComment                   PartyComment[]
  Topic                          Topic[]
  VoteForReformulation           VoteForReformulation[]
  DebateDescriptionReformulation DebateDescriptionReformulation[]
  Follow                         Follow[]
}

model PreRegistrationUser {
  id                 String      @id @default(uuid())
  email              String      @unique
  name               String
  firstName          String
  password           String
  telephone          String
  address            String
  politicSide        Affiliation
  profession         String?
  profilePicture     String?
  formationName      String?
  formationObtention String?
  birthSex           String?
  actualSex          String?
  sexualOrientation  String?
  religion           String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Follow {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  entityType String
  entityId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VerifyUser {
  id        String   @id @default(uuid())
  email     String
  recto1    String
  verso1    String
  idNumber1 String
  recto2    String?
  verso2    String?
  idNumber2 String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifications {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  type      String
  contentid String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Party {
  id          String      @id @default(uuid())
  founderId   String
  name        String
  logo        String      @default("")
  politicSide Affiliation
  description String      @default("")
  reason      String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  for         String[]
  against     String[]

  Personality       Personality[]
  PartyMembership   PartyMembership[]
  MembershipInvites MembershipInvite[]
  PartyHistoryEvent PartyHistoryEvent[]
  PartyComment      PartyComment[]
}

model PartyHistoryEvent {
  id        String   @id @default(uuid())
  party     Party    @relation(fields: [partyId], references: [id])
  partyId   String
  title     String
  content   String
  dateStart DateTime
  dateEnd   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PartyRole {
  MEMBER
  FOUNDER
  ADMIN
}

model MembershipInvite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  party     Party    @relation(fields: [partyId], references: [id])
  partyId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartyMembership {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  party     Party     @relation(fields: [partyId], references: [id])
  partyId   String
  role      PartyRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PartyComment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  party     Party    @relation(fields: [partyId], references: [id])
  partyId   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Personality {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  party       Party?   @relation(fields: [partyId], references: [id])
  partyId     String?
  description String
  for         String[]
  against     String[]
}

model Topic {
  id            String    @id @default(uuid())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  title         String
  parentTopicId String?
  childrenId    String[]
  description   String
  medias        String[]
  debates       String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Opinion       Opinion[]
}

model Debate {
  id                         String                           @id @default(uuid())
  title                      String
  content                    String
  descriptionReformulations  DebateDescriptionReformulation[]
  arguments                  Argument[]
  debateResultId             String                           @unique
  debateContributorsResultId String                           @unique
  createdAt                  DateTime                         @default(now())
  updatedAt                  DateTime                         @updatedAt
  topicId                    String?
  argumentId                 String?
  DebateVote                 DebateVote[]
}

model DebateDescriptionReformulation {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  debateId String
  title    String
  content  String
  score    Int    @default(0)

  isNameDisplayed        Boolean @default(false)
  isWorkDisplayed        Boolean @default(false)
  isPoliticSideDisplayed Boolean @default(false)

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Debate               Debate                 @relation(fields: [debateId], references: [id])
  VoteForReformulation VoteForReformulation[]
}

model VoteForReformulation {
  id                             String                         @id @default(uuid())
  user                           User                           @relation(fields: [userId], references: [id])
  userId                         String
  debateDescriptionReformulation DebateDescriptionReformulation @relation(fields: [debateReformulationId], references: [id])
  debateReformulationId          String
  value                          Boolean
  createdAt                      DateTime                       @default(now())
  updatedAt                      DateTime                       @updatedAt
}

model DebateResult {
  id              String @id @default(uuid())
  nbReallyFor     Int    @default(0)
  nbFor           Int    @default(0)
  nbNeutral       Int    @default(0)
  nbAgainst       Int    @default(0)
  nbReallyAgainst Int    @default(0)
}

enum DebateVoteType {
  FOR
  AGAINST
  NEUTRAL
  REALLY_FOR
  REALLY_AGAINST
}

model DebateVote {
  id                String         @id @default(uuid())
  value             DebateVoteType
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  isFromContributor Boolean        @default(false)
  debate            Debate         @relation(fields: [debateId], references: [id])
  debateId          String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

enum ArgumentType {
  FOR
  AGAINST
  SOLUTION
}

model Argument {
  id            String       @id @default(uuid())
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  debateId      String
  title         String
  content       String
  type          ArgumentType @default(FOR)
  childDebateId String?
  responses     String[]
  votes         Vote[]
  nbGood        Int          @default(0)
  nbBad         Int          @default(0)
  Debate        Debate       @relation(fields: [debateId], references: [id])

  //anonimity
  isNameDisplayed        Boolean @default(false)
  isWorkDisplayed        Boolean @default(false)
  isPoliticSideDisplayed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id         String   @id @default(uuid())
  value      Boolean
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  argument   Argument @relation(fields: [argumentId], references: [id])
  argumentId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Opinion {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String //Maybe entityId pour que les opinions soient aussi sur les parties. A voir 
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  opinion   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BanWord {
  id        String   @id @default(uuid())
  word      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportingType {
  TOPIC
  DEBATE
  ARGUMENT
  REFORMULATION
  COMMENT
}

model Reporting {
  id         String        @id @default(uuid())
  entityId   String
  entityType ReportingType
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}
